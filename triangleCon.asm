SSG SEGMENT PARA STACK 'SSG'
	DW 32 DUP(?)
SSG ENDS

DSG SEGMENT PARA 'DSG'
	CR EQU 13
	LF EQU 10
	MSG1 DB 'N: ', 0
	MSG2 DB 'Dizi ', 0
	HATA DB CR, LF, '0 ila 1000 arasinda sayi giriniz. ', 0
	HATA2 DB 'Verilen dizide ucgen olusturabilecek eleman yok. ', 0
	SONUC DB 'Toplam ', 0
	N DW ?
	DIZI DW 100 DUP(0)
	TMPKENARLAR DW 3 DUP(0)
	MINKENARLAR DW 3 DUP(1000) 
DSG ENDS

CSG SEGMENT PARA 'CSG'
	ASSUME CS:CSG, DS:DSG, SS:SSG
	
	ANA PROC FAR
		PUSH DS
		XOR AX, AX
		PUSH AX
		
		MOV AX, DSG
		MOV DS, AX
		
		;CODE
		MOV AX, OFFSET MSG1
		CALL PUT_STR
		CALL GETN
		MOV N, AX
		
		MOV CX, N
		LEA SI, DIZI 
		XOR DI, DI
	
	L1:
		MOV AX, OFFSET MSG2	;DIZI INDISINI YAZDIR
		CALL PUT_STR 
		MOV AX, DI
		CALL PUTN
		MOV AL, ':'
		CALL PUTC
		MOV AL, ' '
		CALL PUTC
		
		CALL GETN
		MOV WORD PTR[SI], AX
		
		ADD SI, 2
		INC DI
		LOOP L1
		
		MOV CX, N
		LEA SI, DIZI
		XOR DI, DI
		
	;L2:	;DIZIYI YAZDIR
		;MOV AX, OFFSET MSG2	;DIZI INDISINI YAZDIR
		;CALL PUT_STR 
		;MOV AX, DI
		;CALL PUTN
		;MOV AL, ':'
		;CALL PUTC
		;MOV AL, ' '
		;CALL PUTC
		
		;MOV AX, WORD PTR [SI]
		;CALL PUTN
		
		;ADD SI, 2
		;INC DI 
		;LOOP L2
		
		XOR SI, SI	; I=0
		
	L3:
		MOV DX, DIZI[SI + 4]
		CMP DX, 0
		JE NEXT3
		MOV AX, DIZI[SI]
		
		PUSH BX
		LEA BX, TMPKENARLAR
		MOV WORD PTR[BX], AX
		POP BX
		
		MOV DI, SI
	L4:
		ADD DI, 2
		MOV DX, DIZI[DI + 2]
		CMP DX, 0
		JE NEXT2
		MOV AX, DIZI[DI]
		
		PUSH BX
		LEA BX, TMPKENARLAR
		MOV WORD PTR[BX + 2], AX
		POP BX
	
		MOV BX, DI
		
		
	L5:
		
		ADD BX, 2
		MOV AX, DIZI[BX]
		CMP AX, 0
		JE NEXT1
		
		PUSH BX
		LEA BX, TMPKENARLAR
		MOV WORD PTR[BX + 4], AX
		POP BX
		
		;CHECK
		CALL ISTRIANGLE
		CMP CX, 1
		
		
		JNZ SKIP
		
		;UCGEN OLUSUR
		CALL UPDATE
		
	SKIP:
		JMP L5
		
	NEXT1:
		JMP L4
	
	NEXT2: 
		ADD SI, 2
		JMP L3
		
	NEXT3:
		LEA SI, MINKENARLAR
		
		MOV AX, WORD PTR[SI]	;ILK KENARI KONTROL ET
		CMP AX, 1000	;1000 E ESIT ISE UCGEN OLUSTURACAK ELEMAN YOKTUR
		
		JZ ERROR2
		CALL PRINTMIN
		JMP FIN_PROG
	ERROR2:
		MOV AX, OFFSET HATA2
		CALL PUT_STR
	
	FIN_PROG:
	
		RETF
	ANA ENDP
	
	PRINTMIN PROC NEAR
		PUSH AX
		PUSH SI
		LEA SI, MINKENARLAR
		
		;MIN KENARLARI YAZDIR
		MOV AL, '('
		CALL PUTC
		
		MOV AX, WORD PTR[SI]
		CALL PUTN
		
		MOV AL, ','
		CALL PUTC
		
		MOV AL, ' '
		CALL PUTC
		
		MOV AX, WORD PTR[SI + 2]
		CALL PUTN
		
		MOV AL, ','
		CALL PUTC
		
		MOV AL, ' '
		CALL PUTC
		
		MOV AX, WORD PTR[SI + 4]
		CALL PUTN 
		
		MOV AL, ')'
		CALL PUTC
		
		POP SI
		POP AX
		RET
	PRINTMIN ENDP
	
	PRINTTMP PROC NEAR
		PUSH AX
		PUSH SI
		LEA SI, TMPKENARLAR
		
		;MIN KENARLARI YAZDIR
		MOV AX, WORD PTR[SI]
		CALL PUTN
		
		MOV AL, ' '
		CALL PUTC
		
		MOV AX, WORD PTR[SI + 2]
		CALL PUTN
		
		MOV AL, ' '
		CALL PUTC
		
		MOV AX, WORD PTR[SI + 4]
		CALL PUTN 
		
		POP SI
		POP AX
		RET
	PRINTTMP ENDP
	
	UPDATE PROC NEAR
		PUSH AX
		PUSH CX
		PUSH SI
		PUSH DI
		
		;CALL PRINTTMP
		;SUM TMP
		LEA SI, TMPKENARLAR
		MOV CX, WORD PTR[SI]
		ADD CX, WORD PTR[SI + 2]
		ADD CX, WORD PTR[SI + 4]
		
		LEA DI, MINKENARLAR
		MOV AX, WORD PTR[DI]
		ADD AX, WORD PTR[DI + 2]
		ADD AX, WORD PTR[DI + 4]
		;CALL PUTN
		;MOV AX, LF
		;CALL PUTC
		
		CMP AX, CX
		JB NOTUPDATE
		
		
		;UPDATE
		MOV AX, WORD PTR[SI]
		MOV WORD PTR [DI], AX
		
		MOV AX, WORD PTR[SI + 2]
		MOV WORD PTR [DI + 2], AX
		
		MOV AX, WORD PTR[SI + 4]
		MOV WORD PTR [DI + 4], AX
		
	NOTUPDATE:
		POP DI
		POP SI
		POP CX
		POP AX
		RET
	UPDATE ENDP
	
	ISTRIANGLE PROC NEAR	;BX 1 ISE UCGEN OLUSABILIR, 0 ISE OLUSAMAZ
		PUSH AX
		PUSH SI
		
		LEA SI, TMPKENARLAR
		MOV CX, 1	;ISTRIANGLE BAYRAGI
		
		MOV AX, WORD PTR[SI + 2]	;B + C > A
		ADD AX, WORD PTR[SI + 4]
		CMP AX, WORD PTR[SI]
		JA NXTKENAR
		MOV CX, 0
		JMP FIN_KENAR
		
	NXTKENAR:
		MOV AX, WORD PTR[SI]	;C + A > B
		ADD AX, WORD PTR[SI + 4]
		CMP AX, WORD PTR[SI + 2]
		JA NXTKENAR2
		MOV CX, 0
		JMP FIN_KENAR
		
	NXTKENAR2:
		MOV AX, WORD PTR[SI]	;A + B > C
		ADD AX, WORD PTR[SI + 2]
		CMP AX, WORD PTR[SI + 4]
		JA FIN_KENAR
		MOV CX, 0
	FIN_KENAR: 
		POP SI
		POP AX
		
		RET
	ISTRIANGLE ENDP
	
	GETC PROC NEAR ;KLAVYEDEN BASILAN DEGERI EKRANDA GOSTERIR
		MOV AH, 1H
		INT 21H
		RET
	GETC ENDP
	
	PUTC PROC NEAR ;AL YAZMACINDAKI DEGERI EKRANDA GOSTERIR
		PUSH AX
		PUSH DX
		MOV DL, AL
		MOV AH, 2
		INT 21H
		POP DX
		POP AX
		RET
	PUTC ENDP
	
	GETN PROC NEAR
		PUSH BX ;BL HANE BILGISINI TUTAR
		PUSH CX ;OKUNAN SAYININ ISLENMESI SIRASINDA ARA DEGERI TUTAR
		PUSH DX ;SAYININ ISARETLI OLUP OLMADIGINI BELIRLER 
	GETN_START:
		MOV DX, 1
		XOR BX, BX ;OKUMA YAPMADI HANE 0 OLUR
		XOR CX, CX ;ARA TOPLAM DEGER 0 OLUR
	NEW:
		CALL GETC ;KLAVYEDEN ILK DEGERI AL'YE OKU
		CMP AL, CR
		JE FIN_READ ;ENTER TUSUNA BASILMIS ISE OKUMAYI SONLANDIR
		CMP AL, '-'
		JNE CTRL_NUM ;OKUNAN DEGER 0-1000 ARASINDA MI
	NEGATIVE:
		MOV DX, -1
		JMP ERROR
	CTRL_NUM:
		CMP AL, '0' ;SAYININ 0-9 ARASINDA OLDUGUNU KONTROL ET
		JB ERROR
		CMP AL, '9'
		JA ERROR
		SUB AL, '0' ;RAKAM ALINDI HANEYI TOPLAMA DAHIL ET 
		MOV BL, AL	;BL'YE OKUNAN HANEYE KOY
		MOV AX, 10	;HANEYÄ° EKLERKEN *10 YAPILACAK
		PUSH DX
		MUL CX
		POP DX
		MOV CX, AX
		ADD CX, BX
		
		;SAYI 0'A MI ESIT KONTROL ET
		CMP CX, 0
		JE ERROR
		
		;SAYI 1000'DEN BUYUK MU KONTROL ET
		CMP CX, 1000
		JAE ERROR
		
		JMP NEW
	ERROR:
		MOV AX, OFFSET HATA
		CALL PUT_STR
		JMP GETN_START
	FIN_READ:
		MOV AX, CX
		;CMP DX, 1
		
		;JE FIN_GETN
		;NEG AX
	FIN_GETN:
		POP DX
		POP CX
		POP DX
		RET
	GETN ENDP
	
	PUTN PROC NEAR
		PUSH CX
		PUSH DX
		XOR DX, DX ;DX 32 BOLMEDE SONUCU ETKILEMESIN DIYE 0 OLMALI
		PUSH DX
		
		MOV CX, 10
		CMP AX, 0
		JGE CALC_DIGITS
		NEG AX 
		PUSH AX
		MOV AL, '-'
		CALL PUTC
		POP AX
	CALC_DIGITS:
		DIV CX
		ADD DX, '0'
		PUSH DX
		XOR DX, DX
		CMP AX, 0
		JNE CALC_DIGITS
	DISP_LOOP:
		POP AX
		CMP AX, 0
		JE END_DISP_LOOP
		CALL PUTC
		JMP DISP_LOOP
	END_DISP_LOOP:
		POP DX
		POP CX
		RET
	PUTN ENDP
	PUT_STR PROC NEAR
		PUSH BX
		MOV BX, AX
		MOV AL, BYTE PTR [BX]
		
	PUT_LOOP:
		CMP AL, 0
		JE PUT_FIN	;0 GELDIYSE STRING SONA ERDI
		CALL PUTC
		INC BX
		MOV AL, BYTE PTR [BX]
		JMP PUT_LOOP
	PUT_FIN:
		POP BX
		RET
	PUT_STR ENDP
		
CSG ENDS
	END ANA
	